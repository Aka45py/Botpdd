import os
import time
import threading
import discord
from discord.ext import commands, tasks
from flask import Flask
import aiohttp
import asyncio
import sys
import traceback

# -------------------------------
# üöÄ Flask principal (Render-friendly)
# -------------------------------
app = Flask(__name__)
bot_ready = False  # Indicateur de statut du bot

@app.route('/')
def home():
    return ("<h2>‚úÖ Le bot PDD est en ligne</h2>"
            f"<p>Statut Discord : {'üü¢ Connect√©' if bot_ready else 'üî¥ D√©connect√©'}</p>"), 200

@app.route('/status')
def status():
    if bot_ready:
        return "‚úÖ Bot Discord connect√©"
    else:
        return "‚ùå Bot Discord d√©connect√©", 503

# -------------------------------
# ‚öôÔ∏è Discord Bot
# -------------------------------
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

Reglement_id = 1031818811265011712
last_welcome_time = 0
WELCOME_COOLDOWN = 15
welcome_queue = []

# -------------------------------
# üìú √âv√©nements Discord
# -------------------------------
@bot.event
async def on_ready():
    global bot_ready
    bot_ready = True
    print(f"[LOG] Bot connect√© en tant que {bot.user}")
    try:
        await bot.user.edit(username="Bot PDD")
    except Exception as e:
        print(f"[LOG] Nom du bot non modifi√© : {e}")
    send_welcome_messages.start()
    keep_alive.start()

@bot.event
async def on_disconnect():
    global bot_ready
    bot_ready = False
    print("[LOG] Bot d√©connect√© üò¢")

@bot.event
async def on_resumed():
    global bot_ready
    bot_ready = True
    print("[LOG] Bot reconnect√© üéâ")

@bot.event
async def on_member_join(member):
    global last_welcome_time
    now = time.time()
    print(f"[LOG] Nouveau membre d√©tect√© : {member} (ID: {member.id})")

    if member not in welcome_queue:
        welcome_queue.append(member)
        print(f"[LOG] Ajout√© √† la file d‚Äôattente ({len(welcome_queue)} membres).")

# -------------------------------
# üîÅ T√¢ches r√©currentes
# -------------------------------
@tasks.loop(seconds=5)
async def send_welcome_messages():
    global last_welcome_time
    now = time.time()
    if welcome_queue and now - last_welcome_time >= WELCOME_COOLDOWN:
        await send_group_message()

async def send_group_message():
    global last_welcome_time
    channel_id = 1004871766201614416
    channel = bot.get_channel(channel_id)
    if channel and isinstance(channel, discord.TextChannel):
        mentions = " ".join([m.mention for m in welcome_queue])
        await channel.send(f"""Bienvenue {mentions} sur le discord des Challenges PDD !
Pour participer √† nos Challenges, quelques r√®gles essentielles :
Nous t'invitons √† lire les **r√®glements** <#{Reglement_id}> (r√®glements distincts des courses et des records)
Ton **pseudo Discord PDD doit √™tre identique au nom de ton bateau** ‚õµÔ∏è (nom de bateau ‚Äì initiales Team / pr√©nom ) 
Pour chaque course, un **formulaire d‚ÄôInscription** üìÉ sera diffus√© 10 jours avant le d√©part et clos √† H-24
A H-23h jusqu‚Äô√† l‚Äôheure du d√©part, un 2√®me **formulaire Options** üìÉ sera √©dit√©. Il sera clos au d√©part de la course. 
Pour permettre les classements, un **Pavillon √† hisser (Pays + D√©partement)** üè≥Ô∏è sera pr√©cis√© en m√™me temps. Le changement de pavillon sera clos au 1er classement (H+ 24)
Des courses OFF hors challenge PDD sont √©galement propos√©es et class√©es pour le fun avec leurs salons d√©di√©s.
Au plaisir de te voir sur les flots avec nous""")
        welcome_queue.clear()
        last_welcome_time = time.time()
        print("[LOG] Message de bienvenue envoy√©.")
    else:
        print("[LOG] Canal de bienvenue introuvable ou invalide.")

@tasks.loop(minutes=5)
async def keep_alive():
    url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME','botpdd.onrender.com')}/status"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                print(f"[LOG] Keep-alive ping ‚Üí {resp.status}")
    except Exception as e:
        print(f"[LOG] Erreur keep-alive : {e}")

# -------------------------------
# üõ†Ô∏è Supervision du bot Discord
# -------------------------------
def start_discord_bot():
    while True:
        try:
            token = os.environ.get("TOKEN_BOT")
            if not token:
                print("[ERREUR] TOKEN_BOT manquant dans Render Environment")
                sys.exit(1)
            print("[LOG] Lancement du bot Discord...")
            bot.run(token)
        except Exception as e:
            print(f"[ERREUR] Bot Discord crash√©, red√©marrage dans 10 sec : {e}")
            traceback.print_exc()
            time.sleep(10)  # d√©lai avant relance

# -------------------------------
# üöÄ Lancement principal
# -------------------------------
if __name__ == "__main__":
    # Lancer Discord dans un thread daemon (supervis√©)
    threading.Thread(target=start_discord_bot, daemon=True).start()

    # Lancer Flask sur le port fourni par Render
    port = int(os.environ.get("PORT", 10000))
    print(f"[LOG] Lancement Flask sur le port {port}")
    app.run(host="0.0.0.0", port=port, use_reloader=False)
